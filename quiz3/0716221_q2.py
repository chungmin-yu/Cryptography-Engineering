# -*- coding: utf-8 -*-
freq=[8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150, 1.974, 0.074]
def calIC(msg, interval): 
    IClist=[]
    avg=0
    for k in range(interval):
        letters={}
        for i in range(26):
            letters.update({chr(i+65):0})
        num=0
        for i in range(k, len(msg), interval):
            if(ord(msg[i]) < 65  or ord(msg[i]) > 90):
                continue
            tmp=letters[msg[i]]
            num += 1
            letters.update({msg[i]:tmp+1})
        IC=0
        for i in range(26):
            val=letters[chr(i+65)]
            IC += ( val * (val-1))
        IC = IC/(num * (num-1))
        #print(IC)
        IClist.append(IC)
    for k in range(len(IClist)):
        avg += IClist[k]
    avg = avg / len(IClist)
    #print("the interval", interval, " of average: " , avg)
    return avg

def findkey(msg, interval, idx): 
    letters={}
    for i in range(26):
        letters.update({chr(i+65):0})
    num=0
    for i in range(idx, len(msg), interval):
        if(ord(msg[i]) < 65  or ord(msg[i]) > 90):
            continue
        tmp=letters[msg[i]]
        num += 1
        letters.update({msg[i]:tmp+1})
    
    key=0
    percentage=0
    variance=9999999999
    for k in range(26):
        tmp_var=0
        for i in range(26):
            percentage = letters[chr(i+65)]*100/num
            tmp_var+=pow((freq[(i+k)%26] - percentage), 2)
            #print(freq[(i+k)%26], percentage)
        #print(tmp_var)
        if(tmp_var<variance):
            variance = tmp_var
            key = k
    print(chr((26-key)+65), end='')
    return key
  

msg = input()
#msg1="ZQQTKPQUWDPGMWDBQTXYLFQWLSHAJBUCIPVKUQEJRBAACLRSIZZCRWTLDFMTPGYXFISOSEASZXNPHTAYHHIIRADDIJLBFOEVKUWWVFFLVTCEXGHFFXFZVGXFBFQEIZOSEZUGFGFUJUGKPCZWZUQQJIVAFLVCSDCXYOPYRSQTEIHQFIIVTAYILRGGRAWARNLAGWKJCZXZUIMPCFTAVXLHMRULAMRTPDMXVVIDWVSJQWWYCYOEVKXIUNSBVVCWAYJSMMGHBWDIUDSYYJAGQXRZWPIFSRZSKPCZWRURQQSYOOIWYSELFUSEEEKOEAVSSMVEDSYYJAPQHRPZKYESSMVEPBSWFTSFLZUUILZJVUXYHGOSJAIERFZAMPCSONSLYOZHRULUIKFHAETXIUVVHBPXYPGPMWMWOYCAMMXKHQTIJPHEICMAAVVJZAWVSMFSRUOSIZUKTMTODDSXYSEWYHGSEZUSPEJAFARXHGOIEKSZGPVJQVGYSVYUPQQEEKWZAYPQTTVYGARJHBPXYPBSWRYSPEPIMPEPMWZHZUUFLVPFDIRSZQZVSWZPZLIAJKOSUVTVBHIEAWARRSJMPLLHTIJHAQTIPBOMGSSEAYPQTLRCSEAVWHMARFHDEUPHUSEHZMFLZSEEEKKTMTOODIDHYURXYOBMUOOHSTHAARXAVQVVCSZYVZCRWZUSOYIPGFWRUREXIPDBMENHTIKOWZXRDRDCMLWXJIVAMXKYOOXZCSEYGLFEXZAWARJHFQAFYYURXHGMGKPJQPPPBXMKLFMXLYSMWZUGAGZLHKXYLQDIUBZUXPVTARVDFUXVYCDXYLDMVKPOXMKFCREEVHTIIMWZHJHGBSNLFRYCHHAYTOGFSELOZHRZKTSCLGAQVHQTEJAWEIDLBFMEAVQLVHZFLPZQQTKPQUWDVTMXVTDQVRASOPRZGAJRUHMKFUWEXJHGFLVKFQEDZCRGFUGQVMHHUWDVFFLVPABSJAIDIJVTBPLYOXMJAGURVJIDIJPBFLVJVGVTOVUWKVFKEEKHDEUPHUSEDVQXYLFAJRUQUIEACDGFTDMVRAWHICFFQGVUHFMDLGMVVZINNVJHQHKVJQVPKWRJVYSZXYHBPPZUURVFTHTEKDVUGYAVQMEKIXKVUQQSIJFQHLSWFCFMTAVDLFMKVZQAYCKOXPFDAQVVZHMXVTSZXJHFQNVHZAYJSMIEKJVQHRURFLVTCFMMLGAJKOSIVZASDJFYAMWZTDAVKHBFEEPBSVVKWQRKPBFLVHBMPPZWESWOWELZZHAVPHGFLVMOOXJOSDITVFPWGYCNESPZUXPPGMTFDSDJLSOZHKYCGFCLGAQVASEXRURUXZZPKXYPGFVFBPXIJVAQWKHBPEIKHTEKHZMVXLDAVKPCZSWOWEXFYWOECLJUHVUQQMJZWRXVKQARJPGFIEJMUWEVZQWJWSDXZUOOMFBGMRULLMGKPBSMEPHEHVTOZHJPBNVZLTFSNYWFIROWEXFYMIIDBGFOEVKYSILHTEETSDIWHQFWYBAMREHHGVVCWQAVKIZHVYOZMEKIOXZVBAJVEHQRULRQBGLFUIEJSUWKOSNIJAVQPGACFLVJFUXZJWEQFMVGQRUVUWKVFKLZZHAVZJOXGYHFMGKLFEGRUCZPPISQWKPAMXVKPKXYLGFEEKODHNOWOLYBAMRVEDQVZLBOINOSFLVYOOXLHZAVKYOPMKPCZEIFVMWWBFZMJOSPXFMCDQTVFDITAJUINZCRMEKWHMUBOXWNLAGWKYSSEIKHTIDHGRSITWZKGHFFWFMOSVVHHILFSSIIDBGFQVHGGVVAVQQSFHTIZYFQPRAWARKVHTIDHGESWISURXZPKAYVAFLVFODIJBFDSLURQHRURURTVBFIDWZMXZUUFLVPBOMULBFWZUHTIZYZUZVZCDGFURUXZVBILZJVFVRKWFMFUVMWYHBPIUKCIRKVIEAVTIEXIHHTIIJCZWZKSDXYLUQRVYOXFVHFURXVTFLVDVAPVUODVRAWHIKOOZXYLFQWGLQFMMLDDSSHPUPZAMAJZAGPIKHWXW"
#msg2="UTCEMKTGHFKJYHFWTFIAGICHNNKMUDPFUAXFXCPLMEMLEGUETBUFDHVGGRXVKJKIHDVADGVVLIPKKFLACKUTTVGPTLGERZGQNGHYQIRWXOFQIICIRIHUYSIHWICPKUREPBPJRRHPMGRMKFLHBPTCUKQDRWXXVPNZTRBJTNTFPKCTRTKQWMJKGUSRTVZMCPGDSHMEFLIBPLYAEAWMGZGKYCWGDYCVKGYIXQLPHXNMCHYTFKZGQNJTWIVNGXXZMJLNPYRJWZPTWYVKJLVJCITUZBTHNULDMKFLHTPUCBUTRATYTVQWHPVQPGFRQLXNVYGGYVKJLVSCSTKCWJGNVYGGKEEHHOVRWBPXUWBEYGIACJADLVLQCHUDYAENRZDNTRLSTPOGTMAKMPVSLGGXCEBIAKJBXYHZAJEVPYIMCTFTLKKQTEHDMGXECMHXNPRDTPRETBPNFXVJGPDZTVQHACJEPBPVBPLVIMCZCJATGFVLRRQMCGITVHJWKTCPGFZLLAKTFEXTJMCLCEBIAKEEHTTVBPRDPBPRHZLSBPXRWXKIPTTNCCKXNZLABGLMUMJVGGVQETTGVZMCTNMYANGKFTLCDCEKKEAXINVQLAKTFWTXVQLXRKYLTAKPPWKKGDGCCYQNUVQPGFNFXVJRPTFCBGCZTRNXWJRTDVCDMCZVYCGXXVLJXUFDHBPVAJKKJRHTPUQIKKGNXGIKFTMJZLITYUPNOGZJUKQDYIMTRAIBXVQJIGIQIBVZMCLCICLHTBGCZCJYRMKMCARKEJXMGIYINTVYHBPJMRBGKWIAGTPTWWCGIRQWMCXYIGIXTFPIAGGYGMKRJXMAFDPGQKFTKHZLSLCJNDPGIDJECKMJVJJRDGGRLSTUNFDEGJMBXCTFPLVZQTFGERXGVYCWXCCRWRUTCEMKTGHFQWYIXOGCGTVVAATUJMUTPKYVHPZQILCJRWXFICPFUFDRHPJCGOCKGHFQIRWXKDNDLVLPTLQWNANTRJXLVJGCXELPTLKERWXEYSGVJYGHMQIWPGFKPPWKKGDGYYCIAGIMUTPTGTGVFPRHOGYGTVZTTEAICRXPKRXFGJYGXULZYXEKCSMQMCGRFZDUXTVLIACEBABPXDGHOKFPMYYGRAVYCXGFLJVXPTCDKEICSNNZRNHHWMGFGIYVXUTMJEFRJAHYDCGXUKYIXOVLILCICYXCCMJLNPUPMEYCSTPURWXOFRXOGJMUMJVUGBVVPUHTDYHBOGMGMCERPGKEEGXFZCCMKERWXCEYARUZQDYJZQWBUKMGRCJRWXHRAILJVPTVQIBHITFZPUKCGIRKJYEHYVPUNNRLSMTFSQEGJMBXVVQITPUGIBUSWIAKJRGHWSJTLQDCHMCEBPKFKFPMCCYGZGGMGMKFLDYJZQIHTZAPEGMGSXPTCXLUZDIXFTMCLKJRTGEPGHGQCCHLRVPIBPRAXHWJYCWGOYRMKEEXGKKQSXORLSLKEZGBGWRDPTZRTTJZQIHTPUTFWJRZGQNKDKGKFPGOVPTYCTRHAWDYCGCKSGXXZCLXFLLSXTRLXGFLAIBQEMUXZKCCWGUCMIGIGTGEVGHMJVZTLVYCAIVFRWXEIGIBEZQBHHYSBTPYGHMQIWWBUKMGBERJRACIYRMGIQRTPFLARDVCHMKDYIXFSWIAGJRPGFRPSPJZAWAWDYCXZGCGBGEATPJVRWXTRAINCCMGMTRBXMKFLPKAYYHYWILXLJVBIHHFPBVQIPTVVMGTPUFDXGFZTXWWRJHPGDSHMTVEPKFKFTFCJDDKOZLVICIRHHHREGXCKUWHNVUTFWJRBXCJSGXVYCBUAKFTBTICATVZMCMQKFTFCJQDYDVGCZUSWLAQDRWXARPTLWIPDNPUCSTPUGCVQERTFRCYIBPXRWXKEAXWGERHBPKFTBTCGKXUFPRHPUGIBQEUWBEYRGTFZRXHPYYHACEBTWFFUCMQLQLXOLQIKCKFTKEFLHBFVPIAGXCCXTRJQXCIGCZQWRWXYYMAXPRPGTVZTTMJRLIAGICHIGTRXOGGPDUCSGABVPMUBVJBTMCZJH"
#msg3="IVIKDKDQMJGLPWLZGMPFBJIIDBBYSLJDXFGBIWWEHAPHEYSGNCCYOOTSTZABCOBVRTAZEYWVWWAZAIDGAZPETHPVBPWOBVJXGFMDOBCGPFKXKSZZAIGCJRPETACJHUTHPVHKJHPZHFPMEVZEQSBYOMHSDVFTASFGZTCOBZCGHFMDOBCWVNVBRVKRGXDBMKFBTGBVGMPTBVFMTGBLBMXZWESHGCBYSKDTBYSFWOARQHCJQEQBCUIDCNCHWWGNEDWIHPTKQCZGDKIGDENHPZGIGWVTWIASBFHATQIJSBCDWZBMPGQKKTHTQIGMEFMJSGISLKCFTHPVFXLSZVHAGSMGCLHWJCSXMDTRBTIWWEGHUHPVGXRZCJWHCCZZBVPFKVFTIWWECYIVQJUXCHTVATCWVRBHJHPFILTCNYWLUOBYSKHAIEGBDBBYSKTKIJHATSFGZTCOBZCGIVIKVXLOAZBAXRQEUYDFITFBBSWIHAPHPVKTHAIUOGSHPRHMWSGNWLWSLKCTKCQUOGPGGCIFDFBYOMWSPRRLDAMUWLTOAVKAXQPTONHSLYWLHSOISZPHQFBBRCCCRMWWVBCYCCWKVXGOLVENPHMJCEJHQFBLIVMJSMWSVYOWICJVGBUHMUOGSPICOGRSLRUTXBAKSTRVWKVXG"
#msg=msg3
avgIC=-1
tmpIC=0
keylen=0
for i in range(2,8):
    tmpIC=calIC(msg,i)
    if (tmpIC>0.062):
        avgIC=tmpIC
        keylen=i
        break
#print(keylen)


#print("\nKEY: ", end='')
plaintext={}
shift=0
tmpascii=0
for i in range(keylen):
    shift = findkey(msg, keylen, i)
    for j in range(i , len(msg), keylen):
        tmpascii=ord(msg[j])+shift
        if(tmpascii > 90):
            tmpascii = tmpascii - 26
        plaintext.update({j:chr(tmpascii)})
print()
#print("plaintext:")
#for i in sorted(plaintext) :
    #print(plaintext[i], end='')




